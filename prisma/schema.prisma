generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider     = "postgres"
  url          = env("DATABASE_URL")
  directUrl    = env("DIRECT_URL")
  relationMode = "prisma"
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  username      String?   @unique
  password      String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  name          String?
  resetToken    String?
  resetTokenExpiry DateTime?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
 }

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Url {
  id          String   @id @default(cuid())
  originalUrl String   @unique
  shortUrl    String @db.VarChar(256) @unique
  createdAt   DateTime @default(now())
  clicks      Int @default(0) 
  updatedAt   DateTime @updatedAt
  userId      String
 }

model UrlClick {
  id        String   @id @default(cuid())
  urlId     String
  createdAt DateTime @default(now())
  ipAddress String?
  userAgent String?
  referer   String?
}

 